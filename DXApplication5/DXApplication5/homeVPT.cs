using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Globalization;
using DevExpress.XtraEditors;
using DevExpress.XtraReports.UI;
using System.Text.RegularExpressions;

namespace DXApplication5
{
    public partial class homeVPT : DevExpress.XtraEditors.XtraForm
    {
        public string name;
        public string username;
        public int flagCheck=0;
        public int flagCheckGV = 0;
        public homeVPT(string x, string y)
        {

            InitializeComponent();
            this.name = y;
            this.username = x;
            hello.Text = "Xin chào, " + this.name;

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource1.FillAsync();

            DataSet class_list = new DataSet();
            try
            {
                Models.HOCSINH list = new Models.HOCSINH("64545454");
                class_list = list.getClassList();
            }
            catch { class_list = null; }
            if (class_list != null)
                foreach (DataRow i in class_list.Tables[0].Rows)
                {
                    createClassHS.Properties.Items.Add(i["MaLop"].ToString());
                    editClassHS.Properties.Items.Add(i["MaLop"].ToString());
                }

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
            sqlDataSource2.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource3.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource5.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // This line of code is generated by Data Source Configuration Wizard
            lopTableAdapter2.Fill(qldt2019DataSet91.LOP);
            // This line of code is generated by Data Source Configuration Wizard
            kqhtTableAdapter1.Fill(kqhtEdit1.KQHT);
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource6.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource7.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource8.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            lopTableAdapter3.Fill(qldt2019DataSet92.LOP);
            // This line of code is generated by Data Source Configuration Wizard
        }

        private void changeInfo(object sender, EventArgs e)
        {
            fChangeInfo x = new fChangeInfo(username);
            x.ShowDialog();

        }


        private void simpleButton1_Click(object sender, EventArgs e)
        {
            this.Hide();
            login lg = new login();
            lg.Show();
        }

        private void panelControl1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void homeVPT_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'qldt2019DataSet.HOCSINH' table. You can move, or remove it, as needed.
            this.hOCSINHTableAdapter.Fill(this.qldt2019DataSet.HOCSINH);

        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void createClassHS_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void xtraTabControl2_Click(object sender, EventArgs e)
        {

        }

        private void btResetHS_Click(object sender, EventArgs e)
        {
            createNameHS.Text = "";
            createDOBHS.Text = "";
            createGenderHS.SelectedIndex = -1;
            createDantocHS.Text = "";
            createNhapHocHS.Text = "";
            createQueHS.Text = "";
            createAdrHS.Text = "";
            createSDTHS.Text = "";

            createNameDad.Text = "";
            createSDTBo.Text = "";
            createYearDad.Text = "";
            createJobDad.Text = "";

            createNameMom.Text = "";
            createSDTMe.Text = "";
            createYearMom.Text = "";
            createJobMom.Text = "";

            createClassHS.Text = "";


        }

        private void btCreateHS_Click(object sender, EventArgs e)
        {
            if (createNameHS.Text == "") { XtraMessageBox.Show("Chưa nhập tên."); return; }

            if (createClassHS.Text=="") { XtraMessageBox.Show("Chưa chọn mã lớp."); return; }


            string icreateNameHS = createNameHS.Text;
            DateTime icreateDOBHS= DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ;
            if (createDOBHS.Text != "")
            {
                icreateDOBHS = DateTime.ParseExact(createDOBHS.Text, "dd-MM-yyyy", null);
            }
            int icreateGenderHS;
            if (createGenderHS.SelectedIndex == 0)
                icreateGenderHS = 1;
            else icreateGenderHS = 0;

            string icreateDantocHS = createDantocHS.Text;

            DateTime icreateNhapHocHS = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ; ;
            if (createNhapHocHS.Text != "")
            {
                icreateNhapHocHS = DateTime.ParseExact(createNhapHocHS.Text, "dd-MM-yyyy", null);
            }

            string icreateQueHS = createQueHS.Text;
            string icreateAdrHS = createAdrHS.Text;
            string icreateSDTHS = createSDTHS.Text;

            string icreateNameDad = createNameDad.Text;
            string icreateSDTBo = createSDTBo.Text;
            string icreateYearDad = createYearDad.Text;
            string icreateJobDad = createJobDad.Text;


            string icreateNameMom = createNameMom.Text;
            string icreateSDTMe = createSDTMe.Text;
            string icreateYearMom = createYearMom.Text;
            string icreateJobMom = createJobMom.Text;

            string icreateClassHS = createClassHS.Text;

            int check;
            try
            { 
                Models.HOCSINH x = new Models.HOCSINH(icreateNameHS, icreateDOBHS, icreateGenderHS, icreateQueHS, icreateDantocHS, icreateNhapHocHS, icreateClassHS, icreateSDTHS, icreateSDTHS, icreateNameDad, icreateYearDad, icreateJobDad, icreateSDTBo, icreateNameMom, icreateYearMom, icreateJobMom, icreateSDTMe);
                check = x.creatHS();
            }
            catch
            { check = 0; }
            if (check==1)   XtraMessageBox.Show("Thêm thành công");
            else XtraMessageBox.Show("Thêm thất bại");

            createNameHS.Text = "";
            createDOBHS.Text = "";
            createGenderHS.SelectedIndex = -1;
            createDantocHS.Text = "";
            createNhapHocHS.Text = "";
            createQueHS.Text = "";
            createAdrHS.Text = "";
            createSDTHS.Text = "";

            createNameDad.Text = "";
            createSDTBo.Text = "";
            createYearDad.Text = "";
            createJobDad.Text = "";

            createNameMom.Text = "";
            createSDTMe.Text = "";
            createYearMom.Text = "";
            createJobMom.Text = "";

            createClassHS.Text = "";
        }

        private void simpleButton1_Click_1(object sender, EventArgs e)
        {
            sqlDataSource1.FillAsync();
            gridControl1.RefreshDataSource();
        }

        private void btcreateRefreshClassList_Click(object sender, EventArgs e)
        {
            createClassHS.Properties.Items.Clear();
            editClassHS.Properties.Items.Clear();
            DataSet class_list = new DataSet();
            try
            {
                Models.HOCSINH list = new Models.HOCSINH("64545454");
                class_list = list.getClassList();
            }
            catch { class_list = null; }
            if (class_list != null)
                foreach (DataRow i in class_list.Tables[0].Rows)
                {
                    createClassHS.Properties.Items.Add(i["MaLop"].ToString());
                    editClassHS.Properties.Items.Add(i["MaLop"].ToString());
                }
        }

        private void btCheckEdit_Click(object sender, EventArgs e)
        {
            flagCheck = 0;
            DataSet info = new DataSet();
            try
            {
                Models.HOCSINH list = new Models.HOCSINH(editMaHS.Text);
                info = list.getStudentInfo();
            }
            catch { info = null; }
            if (info == null)
            {
                XtraMessageBox.Show("Không thể truy vấn.");
                return;
            }

            if (info.Tables[0].Rows.Count == 0) { XtraMessageBox.Show("Học sinh không tồn tại"); return; }



            DataRow x = info.Tables[0].Rows[0];
            editNameHS.Text = x["HoTen"].ToString();
            if (x["NgaySinh"].ToString() != "")
            {
               
                DateTime ieditDOBHS = DateTime.ParseExact(x["NgaySinh"].ToString(), "dd-MMM-yy hh:mm:ss tt", CultureInfo.InvariantCulture);
                editDOBHS.Text = ieditDOBHS.ToString("dd-MM-yyyy");
            }

            if (Convert.ToInt32(x["GioiTinh"]) == 1) editGenderHS.SelectedIndex = 0;
            if (Convert.ToInt32(x["GioiTinh"]) == 0) editGenderHS.SelectedIndex = 1;
                       
            editDantocHS.Text = x["DanToc"].ToString();
            if (x["NgayNhapHoc"].ToString() != "")
            {
                DateTime ieditNhaphoc = DateTime.ParseExact(x["NgayNhapHoc"].ToString(), "dd-MMM-yy hh:mm:ss tt", null);
                editNhapHocHS.Text = ieditNhaphoc.ToString("dd-MM-yyyy");
            }
            editQueHS.Text = x["QueQuan"].ToString();
            editAdrHS.Text = x["DiaChiThuongTru"].ToString();
            editSDTHS.Text = x["SDTLienHe"].ToString();

            editNameDad.Text = x["HoTenBo"].ToString();
            editSDTBo.Text = x["SDTBo"].ToString();
            editYearDad.Text = x["NamSinhBo"].ToString();
            editJobDad.Text = x["NgheNghiepBo"].ToString();

            editNameMom.Text = x["HoTenMe"].ToString();
            editSDTMe.Text = x["SDTMe"].ToString();
            editYearMom.Text = x["NamSinhMe"].ToString();
            editJobMom.Text = x["NgheNghiepMe"].ToString();

            editClassHS.Text = x["MaLopHoc"].ToString();
            if (Convert.ToInt32(x["TrangThai"]) == 1) editStatusHS.SelectedIndex = 0;
            if (Convert.ToInt32(x["TrangThai"]) == 0) editStatusHS.SelectedIndex = 1;

            flagCheck = 1;

        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            if (flagCheck == 0) { XtraMessageBox.Show("Hãy kiểm tra trước khi xóa."); return; }
            if (XtraMessageBox.Show("Bạn có muốn xóa học sinh có MãHS là \"" + editMaHS.Text + "\" ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            int check;
            try
            {
                Models.HOCSINH x = new Models.HOCSINH(editMaHS.Text);
                check = x.deleteStudent();
            }
            catch
            { check = 0; }
            XtraMessageBox.Show("Xóa thành công.");
            flagCheck = 0;
            btResetHS_Click(sender, e);
        }

        private void btRefreshClassList_Click(object sender, EventArgs e)
        {
            createClassHS.Properties.Items.Clear();
            editClassHS.Properties.Items.Clear();
            DataSet class_list = new DataSet();
            try
            {
                Models.HOCSINH list = new Models.HOCSINH("64545454");
                class_list = list.getClassList();
            }
            catch { class_list = null; }
            if (class_list != null)
                foreach (DataRow i in class_list.Tables[0].Rows)
                {
                    createClassHS.Properties.Items.Add(i["MaLop"].ToString());
                    editClassHS.Properties.Items.Add(i["MaLop"].ToString());
                }
        }

        private void btUpdateHS_Click(object sender, EventArgs e)
        {
            if (flagCheck == 0) { XtraMessageBox.Show("Hãy kiểm tra trước khi cập nhật."); return; }
            if (XtraMessageBox.Show("Bạn có cập nhật học sinh có MãHS là \"" + editMaHS.Text + "\" ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            string ieditNameHS = editNameHS.Text;
            DateTime ieditDOBHS = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ;
            if (editDOBHS.Text != "")
            {
                ieditDOBHS = DateTime.ParseExact(editDOBHS.Text, "dd-MM-yyyy", null);
            }
            int ieditGenderHS;
            if (editGenderHS.SelectedIndex == 0)
                ieditGenderHS = 1;
            else ieditGenderHS = 0;

            int ieditStatusHS;
            if (editStatusHS.SelectedIndex == 0)
                ieditStatusHS = 1;
            else ieditStatusHS = 0;

            string ieditDantocHS = editDantocHS.Text;

            DateTime ieditNhapHocHS = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ; ;
            if (editNhapHocHS.Text != "")
            {
                ieditNhapHocHS = DateTime.ParseExact(editNhapHocHS.Text, "dd-MM-yyyy", null);
            }

            string ieditQueHS = editQueHS.Text;
            string ieditAdrHS = editAdrHS.Text;
            string ieditSDTHS = editSDTHS.Text;

            string ieditNameDad = editNameDad.Text;
            string ieditSDTBo = editSDTBo.Text;
            string ieditYearDad = editYearDad.Text;
            string ieditJobDad = editJobDad.Text;


            string ieditNameMom = editNameMom.Text;
            string ieditSDTMe = editSDTMe.Text;
            string ieditYearMom = editYearMom.Text;
            string ieditJobMom = editJobMom.Text;

            string ieditClassHS = editClassHS.Text;

            int check;
            try
            {
                Models.HOCSINH x = new Models.HOCSINH(editMaHS.Text, ieditNameHS, ieditDOBHS, ieditGenderHS, ieditQueHS, ieditDantocHS, ieditNhapHocHS, ieditStatusHS, ieditClassHS, ieditSDTHS, ieditSDTHS, ieditNameDad, ieditYearDad, ieditJobDad, ieditSDTBo, ieditNameMom, ieditYearMom, ieditJobMom, ieditSDTMe);
                check = x.updateStudent();
            }
            catch
            { check = 0; }
            if (check == 1) XtraMessageBox.Show("Cập nhật thành công");
            else XtraMessageBox.Show("Cập nhật thất bại");
            flagCheck =0;
        }

        private void xtraTabPage7_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btRefreshGV_Click(object sender, EventArgs e)
        {
            sqlDataSource2.FillAsync();
            gridControl2.RefreshDataSource();
        }

        private void labelControl40_Click(object sender, EventArgs e)
        {

        }

        private void labelControl50_Click(object sender, EventArgs e)
        {

        }

        private void btResetGV_Click(object sender, EventArgs e)
        {
            createNameGV.Text = "";
            createDOBGV.Text = "";
            createGenderGV.SelectedIndex = -1;
            createDantocGV.Text = "";
            createBatDauGV.Text = "";
            createQueGV.Text = "";
            createAdrGV.Text = "";
            createAdrGV.Text = "";

            createTrinhDoGV.Text = "";
        }

        private void btCreateGV_Click(object sender, EventArgs e)
        {
            if (createNameGV.Text == "") { XtraMessageBox.Show("Chưa nhập tên."); return; }


            string icreateNameGV = createNameGV.Text;
            DateTime icreateDOBGV = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ;
            if (createDOBGV.Text != "")
            {
                icreateDOBGV = DateTime.ParseExact(createDOBGV.Text, "dd-MM-yyyy", null);
            }
            int icreateGenderGV;
            if (createGenderGV.SelectedIndex == 0)
                icreateGenderGV = 1;
            else icreateGenderGV = 0;

            string icreateDantocGV = createDantocGV.Text;

            DateTime icreateBatDauGV = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ; ;
            if (createBatDauGV.Text != "")
            {
                icreateBatDauGV = DateTime.ParseExact(createBatDauGV.Text, "dd-MM-yyyy", null);
            }

            string icreateQueGV = createQueGV.Text;
            string icreateAdrGV = createAdrGV.Text;
            string icreateSDTGV = createSDTGV.Text;

 

            string icreateTrinhDoGV = createTrinhDoGV.Text;

            int check;
            try
            {
                Models.GIAOVIEN x = new Models.GIAOVIEN(icreateNameGV, icreateDOBGV, icreateGenderGV, icreateQueGV, icreateDantocGV, icreateBatDauGV, icreateSDTGV, icreateSDTGV, icreateTrinhDoGV);
                check = x.creatGV();
            }
            catch
            { check = 0; }
            if (check == 1) XtraMessageBox.Show("Thêm thành công");
            else XtraMessageBox.Show("Thêm thất bại");
            btResetGV_Click(sender, e);
        }

        private void labelControl44_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton10_Click(object sender, EventArgs e)
        {
            if (flagCheckGV == 0) { XtraMessageBox.Show("Hãy kiểm tra trước khi xóa."); return; }
            if (XtraMessageBox.Show("Bạn có muốn xóa giáo viên có MãGV là \"" + editMaGV.Text + "\" ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            int check;
            try
            {
                Models.GIAOVIEN x = new Models.GIAOVIEN(editMaGV.Text);
                check = x.deleteGV();
            }
            catch
            { check = 0; }
            XtraMessageBox.Show("Xóa thành công.");
            flagCheckGV = 0;

        }

        private void xtraTabControl1_Click(object sender, EventArgs e)
        {

        }

        private void btCheckGV_Click(object sender, EventArgs e)
        {
            flagCheckGV = 0;
            DataSet info = new DataSet();
            try
            {
                Models.GIAOVIEN list = new Models.GIAOVIEN(editMaGV.Text);
                info = list.getGVInfo();
            }
            catch { info = null; }
            if (info == null)
            {
                XtraMessageBox.Show("Không thể truy vấn.");
                return;
            }

            if (info.Tables[0].Rows.Count == 0) { XtraMessageBox.Show("Giáo viên không tồn tại"); return; }



            DataRow x = info.Tables[0].Rows[0];

            editNameGV.Text = x["HoTen"].ToString();

            if (x["NgaySinh"].ToString() != "")
            {

                DateTime ieditDOBGV = DateTime.ParseExact(x["NgaySinh"].ToString(), "dd-MMM-yy hh:mm:ss tt", CultureInfo.InvariantCulture);
                editDOBGV.Text = ieditDOBGV.ToString("dd-MM-yyyy");
            }

            if (Convert.ToInt32(x["GioiTinh"]) == 1) editGenderGV.SelectedIndex = 0;
            if (Convert.ToInt32(x["GioiTinh"]) == 0) editGenderGV.SelectedIndex = 1;

            editDantocGV.Text = x["DanToc"].ToString();

            if (x["NgayBatDau"].ToString() != "")
            {
                DateTime ieditBatDauGV = DateTime.ParseExact(x["NgayBatDau"].ToString(), "dd-MMM-yy hh:mm:ss tt", null);
                editBatDauGV.Text = ieditBatDauGV.ToString("dd-MM-yyyy");
            }

            editQueGV.Text = x["QueQuan"].ToString();
            editAdrGV.Text = x["DiaChiThuongTru"].ToString();
            editSDTGV.Text = x["SDTLienHe"].ToString();

            editTrinhDoGV.Text = x["TrinhDoCapBac"].ToString();

            if (Convert.ToInt32(x["TrangThai"]) == 1) editStatusGV.SelectedIndex = 0;
            if (Convert.ToInt32(x["TrangThai"]) == 0) editStatusGV.SelectedIndex = 1;

            flagCheckGV = 1;
        }

        private void btUpdateGV_Click(object sender, EventArgs e)
        {
            if (flagCheckGV == 0) { XtraMessageBox.Show("Hãy kiểm tra trước khi cập nhật."); return; }
            if (XtraMessageBox.Show("Bạn có cập nhật học sinh có MãGV là \"" + editMaGV.Text + "\" ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            string ieditNameGV = editNameGV.Text;
            DateTime ieditDOBGV = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ;
            if (editDOBGV.Text != "")
            {
                ieditDOBGV = DateTime.ParseExact(editDOBGV.Text, "dd-MM-yyyy", null);
            }
            int ieditGenderGV;
            if (editGenderGV.SelectedIndex == 0)
                ieditGenderGV = 1;
            else ieditGenderGV = 0;

            int ieditStatusGV;
            if (editStatusGV.SelectedIndex == 0)
                ieditStatusGV = 1;
            else ieditStatusGV = 0;

            string ieditDantocGV = editDantocGV.Text;

            DateTime ieditBatDauGV = DateTime.ParseExact("01-01-2000", "dd-MM-yyyy", null); ; ;
            if (editBatDauGV.Text != "")
            {
                ieditBatDauGV = DateTime.ParseExact(editBatDauGV.Text, "dd-MM-yyyy", null);
            }

            string ieditQueGV = editQueGV.Text;
            string ieditAdrGV = editAdrGV.Text;
            string ieditSDTGV = editSDTGV.Text;


            string ieditTrinhDoGV = editTrinhDoGV.Text;

            int check;
            try
            {
                Models.GIAOVIEN x = new Models.GIAOVIEN(editMaGV.Text, ieditNameGV, ieditDOBGV, ieditGenderGV, ieditQueGV, ieditDantocGV, ieditBatDauGV, ieditStatusGV, ieditAdrGV ,ieditSDTGV, ieditTrinhDoGV);
                check = x.updateGV();
            }
            catch
            { check = 0; }
            if (check == 1) XtraMessageBox.Show("Cập nhật thành công");
            else XtraMessageBox.Show("Cập nhật thất bại");
            flagCheckGV = 0;
        }

        private void tbCreateSchoolYear_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void btCreateSchoolYear_Click(object sender, EventArgs e)
        {
            string str = tbCreateSchoolYear.Text;
            string regex = "20\\d\\d20\\d\\d";
            if (!((Regex.IsMatch(str,regex)) & (str.Length==8)))
             { XtraMessageBox.Show("Năm học không đúng"); return; }

            if (XtraMessageBox.Show("Bạn có muốn thêm học kỳ \"" + str + "\" vào hệ thống? Lưu ý rằng việc xóa bỏ là bất khả thi", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;
            int check;
            try
            {
                Models.NAMHOC x = new Models.NAMHOC(str);
                check = x.creatNamhoc();
            }
            catch
            { check = 0; }
            if (check != 0) XtraMessageBox.Show("Thêm thành công");
            else XtraMessageBox.Show("Thêm thất bại");
            flagCheckGV = 0;
        }

        private void refeshSchoolYear_Click(object sender, EventArgs e)
        {
            sqlDataSource3.FillAsync();
            gridControl3.RefreshDataSource();
        }

        private void labelControl45_Click(object sender, EventArgs e)
        {

        }

        private void stackPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void labelControl46_Click(object sender, EventArgs e)
        {

        }

        private void labelControl47_Click(object sender, EventArgs e)
        {

        }

        private void textEdit4_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click_2(object sender, EventArgs e)
        {

        }

        private void textEdit5_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click_3(object sender, EventArgs e)
        {

            int check;
            try
            {
                Models.LOPHOC x = new Models.LOPHOC(ecClassNum.Text, ecClassGV.Text, ecClassName.Text);
                check = x.createClass();
            }
            catch
            { check = 0; }
            if (check != 0) XtraMessageBox.Show("Thêm thành công");
            else XtraMessageBox.Show("Thêm thất bại "+ ecClassGV.Text);
        }

        private void gridLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void panelControl1_Paint_1(object sender, PaintEventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void btSaveClass_Click(object sender, EventArgs e)
        {
            lopTableAdapter2.Update(qldt2019DataSet91.LOP);
            lopTableAdapter2.Fill(qldt2019DataSet91.LOP);

        }

        private void gridControl4_Click(object sender, EventArgs e)
        {

        }

        private void gridControl5_Click(object sender, EventArgs e)
        {

        }

        private void saveScore_Click(object sender, EventArgs e)
        {
            kqhtTableAdapter1.Update(kqhtEdit1.KQHT);
            kqhtTableAdapter1.Fill(kqhtEdit1.KQHT);
        }

        private void gridControl6_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {

            try
            {
                this.hOCSINHTableAdapter2.FillBy1(this.qldt2019DataSet111.HOCSINH, searchClass.Text);
            }
            catch (System.Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.Message);
            }

            string siso = "";
            try
            {
                Models.LOPHOC x = new Models.LOPHOC(searchClass.Text);
                siso = x.getClassSiso();
            }
            catch
            {
                siso = "0";
            }
            lbClassSiSo.Text = siso;

            DataSet r1 = new DataSet();
            try
            {
                Models.LOPHOC y = new Models.LOPHOC(searchClass.Text);
                r1 = y.getClassGVCN();
            }
            catch
            {
                r1 = null;
            }

            if (r1.Tables[0].Rows.Count > 0)
            {
                lbClassName.Text = r1.Tables[0].Rows[0][0].ToString();
                lbClassGVCN.Text = r1.Tables[0].Rows[0][1].ToString();
                lbClassSDTGV.Text = r1.Tables[0].Rows[0][2].ToString();

            }

            DataSet r2 = new DataSet();
            try
            {
                Models.LOPHOC y = new Models.LOPHOC(searchClass.Text);
                r2 = y.getClassLoptruong();
            }
            catch
            {
                r2 = null;
            }

            if (r2.Tables[0].Rows.Count > 0)
            {
                lbClassHS.Text = r2.Tables[0].Rows[0][0].ToString();
                lbClassSDTHS.Text = r2.Tables[0].Rows[0][1].ToString();


            }
        }

        private void gridControl7_Click(object sender, EventArgs e)
        {

        }

        private void fillBy1ToolStripButton_Click(object sender, EventArgs e)
        {

        }

        private void xtraTabPage17_Paint(object sender, PaintEventArgs e)
        {

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            QLDT.Report.PhanCongGiangDay x = new QLDT.Report.PhanCongGiangDay();
            x.ShowPreviewDialog();
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            QLDT.Report.KhenThuong x = new QLDT.Report.KhenThuong();
            x.ShowPreviewDialog();
        }
    }
}